{"version":3,"sources":["images/user.png","components/Profile/ProfileStatusWithHocs.jsx","components/Profile/ProfilePhoto.jsx","components/Profile/MyProfile.jsx"],"names":["module","exports","connect","_ref","status","setStatus","editMode","setEditMode","useState","tempStatus","setTempStatus","useEffect","toggleEditMode","React","createElement","value","onChange","e","currentTarget","autoFocus","onBlur","onDoubleClick","PhotoUpload","props","console","log","target","files","length","updateProfilePhoto","type","src","photo","alt","compose","state","profile","profilePage","userId","auth","userID","getProfile","getStatus","updateProfile","ProfilePhoto","photos","large","defaultUserPhoto","fullName","ProfileStatusWithHocs","aboutMe","contacts","facebook","github","instagram","vk","Preloader"],"mappings":"2FAAAA,EAAOC,QAAU,IAA0B,kC,oFC8C5BC,oBA1CeC,IAAyB,IAAxB,OAACC,EAAM,UAACC,GAAUF,GAMxCG,EAASC,GAAeC,oBAAS,IACjCC,EAAWC,GAAiBF,mBAASJ,GAEzCO,oBAAW,KAEND,EAAcN,IACjB,CAACA,IAEJ,MAAMQ,EAAiBA,MACF,IAAbN,EACAC,GAAY,IAEZA,GAAY,GACZF,EAAUI,GACVC,EAAcN,KAStB,OAAOS,IAAAC,cAAA,WACFR,EACKO,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAOC,MAAON,EAAaO,SAPfC,IACpBP,EAAeO,EAAEC,cAAcH,QAM8BI,WAAW,EAAMC,OAAQR,KAGhFC,IAAAC,cAAA,WACED,IAAAC,cAAA,QAAMO,cAAeT,GAAiC,KAAfH,GAAoC,OAAfA,EAAuB,oBAAsBA,OCbzH,MAAMa,EAAeC,GAWVV,IAAAC,cAAA,SAAOE,SANWC,IACrBO,QAAQC,IAAIR,EAAES,OAAOC,MAAM,IACxBV,EAAES,OAAOC,MAAMC,QACdL,EAAMM,mBAAmBZ,EAAES,OAAOC,MAAM,KAIjCG,KAAM,SA2BV5B,kBAAQ,KAAK,CAAC2B,wBAAd3B,CAVKqB,GAETV,IAAAC,cAAA,WACHD,IAAAC,cAAA,OAAKiB,IAAKR,EAAMS,MAAOC,IAAI,KAC3BpB,IAAAC,cAACQ,EAAW,CAACO,mBAAoBN,EAAMM,uB,0BCsDhCK,sBACXhC,YATmBiC,IACZ,CACHC,QAASD,EAAME,YAAYD,QAC3BhC,OAAQ+B,EAAME,YAAYjC,OAC1BkC,OAAQH,EAAMI,KAAKC,SAMH,CACZC,eACAC,cACArC,cACAsC,oBANGT,CAzGG/B,IAA6D,IAA5D,QAACiC,EAAO,WAACK,EAAU,UAACC,EAAS,OAACtC,EAAM,UAACC,EAAS,OAACiC,GAAOnC,EAsBrE,OAnBAQ,oBAAU,KAIF8B,EAAWH,GACXI,EAAUJ,IAEhB,CAAClC,IAYEgC,EAGEvB,IAAAC,cAAA,WACHD,IAAAC,cAAC8B,EAAY,CACTZ,MAAOI,EAAQS,OAAOC,MAAQV,EAAQS,OAAOC,MAAQC,MAIzDlC,IAAAC,cAAA,WAAKD,IAAAC,cAAA,SAAIsB,EAAQY,WACjBnC,IAAAC,cAACmC,EAAqB,CAClB7C,OAAQA,EACRC,UAAWA,IAGfQ,IAAAC,cAAA,WAAK,IAAEsB,EAAQc,QAAQ,KAAOrC,IAAAC,cAAA,WAAK,wEACrBD,IAAAC,cAAA,WACdD,IAAAC,cAAA,WAAMsB,EAAQe,SAASC,UACvBvC,IAAAC,cAAA,WAAMsB,EAAQe,SAASE,QACvBxC,IAAAC,cAAA,WAAMsB,EAAQe,SAASG,WACvBzC,IAAAC,cAAA,WAAMsB,EAAQe,SAASI,KAnBhB1C,IAAAC,cAAC0C,IAAS","file":"static/js/9.6d32a257.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/user.d961d73a.png\";","import React, {useEffect, useState} from \"react\"\nimport {connect} from \"react-redux\";\n// import {setStatus} from \"../../redux/profile_reducer\";\n\nconst ProfileStatusWithHocs = ({status,setStatus}) => { // props\n\n    /*\n    * хуки НЕ можна використовувати в умовах і циклах\n    * */\n\n    let [editMode,setEditMode] = useState(false); // hook\n    let [tempStatus,setTempStatus] = useState(status); // hook\n    //\n     useEffect( () => { // хук, функція, яка виконується ПІСЛЯ того як відбулось відображення рендерингу\n         // що зробити\n          setTempStatus(status)\n     },[status]); // при якій умові - коли змінюється вказаний елемент // якщо умова - порожній масив - [] - то поведінка буде як у componentDidMount\n\n    const toggleEditMode = () => {\n        if( editMode === false)\n            setEditMode(true);\n        else{\n            setEditMode(false);\n            setStatus(tempStatus);\n            setTempStatus(status)\n\n        }\n    }\n\n    const statusOnChange = (e) => {\n        setTempStatus( e.currentTarget.value )\n    }\n\n    return <div>\n        {editMode\n            ? <div>\n                <input value={tempStatus}  onChange={statusOnChange} autoFocus={true} onBlur={toggleEditMode} />\n\n            </div>\n            : <div>\n                <span onDoubleClick={toggleEditMode}>{(tempStatus === '' || tempStatus === null) ? '[click to change]' : tempStatus}</span>\n            </div>\n        }\n    </div>\n}\n\nexport default connect()(ProfileStatusWithHocs)","import React from \"react\"\nimport {connect} from \"react-redux\";\n// import {Redirect} from \"react-router-dom\";\n// import {Field, reduxForm} from \"redux-form\";\n// import style from \"../Login/Login.module.css\";\n// import {FileUpload, Input} from \"../common/FormsControls/FormsControls\";\n// import {required} from \"../../utils/validate/validator\";\n// import {compose} from \"redux\";\n// import {checkAuthorization, login} from \"../../redux/auth_reducer\";\nimport {updateProfilePhoto} from \"../../redux/profile_reducer\";\n\n/*\nconst PhotoUpload = (props) => {\n    const onSubmit = (formData) => {\n        //\n        /!*if(props.auth.isAuth === false){\n            props.login(formData.email,formData.pass,formData.rememberMe,formData.captcha)\n        }else{\n            return <Redirect to={'/index'}/>\n        }*!/\n        console.log(formData)\n    }\n    return <div>\n        <PhotoUploadReduxForm onSubmit={onSubmit} {...props} />\n    </div>\n}*/\n\nconst PhotoUpload = (props) => {\n\n    // if(props.auth.isAuth === false){\n    //props.auth(formData.email,formData.pass,formData.rememberMe)\n\n    const onPhotoSelected = (e) =>{\n        console.log(e.target.files[0])\n        if(e.target.files.length)\n            props.updateProfilePhoto(e.target.files[0])\n    }\n\n    return <input onChange={onPhotoSelected}\n                   type={'file'} />;\n\n    /*\n}else{\n    return <Redirect to={'/index'}/>\n}*/\n\n\n}\n//\n// const PhotoUploadReduxForm = reduxForm({\n//     form: 'photoUpload'\n// })(PhotoUploadForm)\n\n\n\n\nlet ProfilePhoto = (props) => {\n\n    return <div>\n        <img src={props.photo} alt=\"\"/>\n        <PhotoUpload updateProfilePhoto={props.updateProfilePhoto}/>\n    </div>\n}\n\n\n\nexport default connect(null,{updateProfilePhoto})(ProfilePhoto)\n\n// export default connect()(ProfilePhoto)","import React, {useEffect} from \"react\";\nimport {connect} from \"react-redux\";\nimport {compose} from \"redux\";\nimport {getProfile, getStatus, setStatus, updateProfile} from \"../../redux/profile_reducer\";\nimport ProfileStatusWithHocs from \"./ProfileStatusWithHocs\";\nimport ProfilePhoto from \"./ProfilePhoto\";\nimport defaultUserPhoto from \"../../images/user.png\";\nimport Preloader from \"../Preloader/Preloader\";\n\nconst MyProfile = ({profile,getProfile,getStatus,status,setStatus,userId}) => {\n    // let {profile,getProfile,getStatus,status,setStatus} = props;\n\n    useEffect(() => {\n\n        // let {getProfile,getStatus} = props;\n\n            getProfile(userId);\n            getStatus(userId);\n\n    },[status])\n\n\n/*\n    if(profile === null) {\n        getProfile(11583);\n        getStatus(11583);\n        //this.props.updateProfile();\n        return null;\n\n    }*/\n\n    if (!profile )\n        return <Preloader/>\n\n    return <div>\n        <ProfilePhoto\n            photo={profile.photos.large ? profile.photos.large : defaultUserPhoto }\n        />\n\n\n        <div><b>{profile.fullName}</b></div>\n        <ProfileStatusWithHocs\n            status={status}\n            setStatus={setStatus}\n        />\n\n        <div>\"{profile.aboutMe}\"</div><br/>\n        Мои контакты: <br/>\n        <div>{profile.contacts.facebook}</div>\n        <div>{profile.contacts.github}</div>\n        <div>{profile.contacts.instagram}</div>\n        <div>{profile.contacts.vk}</div>\n\n    </div>;\n}\n/*\n\nclass MyProfile2 extends React.Component{\n\n    componentDidMount() {\n\n        let {getProfile,getStatus} = this.props;\n        getProfile(11583);\n        getStatus(11583);\n        // this.props.setFetchingStatus(true);\n        //let userID = this.props.match.params.userID;\n        // this.props.getProfile(11583);\n        // this.props.getStatus(11583);\n    }\n\n    render(){\n        //debugger\n\n        let {profile,getProfile,getStatus,status,setStatus} = this.props;\n\n        if(profile === null) {\n            getProfile(11583);\n            getStatus(11583);\n            //this.props.updateProfile();\n            return null;\n\n        }\n        return <div>\n            <ProfilePhoto\n                 photo={profile.photos.large ? profile.photos.large : defaultUserPhoto }\n            />\n\n\n            <div><b>{profile.fullName}</b></div>\n            <ProfileStatusWithHocs\n                status={status}\n                setStatus={setStatus}\n            />\n\n            <div>\"{profile.aboutMe}\"</div><br/>\n            Мои контакты: <br/>\n            <div>{profile.contacts.facebook}</div>\n            <div>{profile.contacts.github}</div>\n            <div>{profile.contacts.instagram}</div>\n            <div>{profile.contacts.vk}</div>\n\n        </div>;\n    }\n}\n*/\n\nlet mapStateToProps = (state) => { // бере увесь глобальний STATE і повертає тільки те, що нам потрібно для цієї компоненти\n    return {\n        profile: state.profilePage.profile,\n        status: state.profilePage.status,\n        userId: state.auth.userID\n    }\n}\n\nexport default compose(\n    connect(\n        mapStateToProps,{\n            getProfile,\n            getStatus,\n            setStatus,\n            updateProfile\n        }\n    )\n)(MyProfile)\n\n"],"sourceRoot":""}